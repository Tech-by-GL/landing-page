"use client"

import { useEffect, useRef, useState } from "react"
import Link from "next/link"
import { motion, useAnimation, useInView, AnimatePresence } from "framer-motion"
import {
  MapPin,
  ArrowRight,
  Clock,
  Users,
  Target,
  CheckCircle,
  Star,
  BookOpen,
  Award,
  Zap,
  Play,
  Calendar,
  TrendingUp,
  ArrowDown,
  Sparkles,
} from "lucide-react"

const progressionCourses = [
  {
    id: 1,
    slug: "luyen-thi-ket",
    name: "KET",
    fullName: "Key English Test",
    level: "A2 - C∆° b·∫£n",
    step: 1,
    duration: "3 th√°ng",
    sessions: "48 bu·ªïi h·ªçc",
    classSize: "10-15 h·ªçc vi√™n",
    successRate: "98%",
    price: "2.500.000ƒë",
    color: "from-green-500 to-emerald-600",
    bgColor: "bg-green-50",
    borderColor: "border-green-200",
    icon: "üéØ",
    description: "B∆∞·ªõc ƒë·∫ßu ti√™n trong h√†nh tr√¨nh chinh ph·ª•c ti·∫øng Anh qu·ªëc t·∫ø",
    detailedDescription:
      "Kh√≥a h·ªçc KET gi√∫p h·ªçc sinh x√¢y d·ª±ng n·ªÅn t·∫£ng ti·∫øng Anh v·ªØng ch·∫Øc theo chu·∫©n Cambridge. Th√¥ng qua c√°c d·ª± √°n STEAM th√∫ v·ªã, h·ªçc sinh kh√¥ng ch·ªâ h·ªçc t·ª´ v·ª±ng v√† ng·ªØ ph√°p m√† c√≤n ph√°t tri·ªÉn t∆∞ duy logic v√† kh·∫£ nƒÉng giao ti·∫øp t·ª± nhi√™n.",
    prerequisites: ["H·ªçc sinh l·ªõp 6-9", "Ki·∫øn th·ª©c ti·∫øng Anh c∆° b·∫£n", "ƒêam m√™ kh√°m ph√° v√† h·ªçc h·ªèi"],
    outcomes: [
      "ƒê·∫°t ch·ª©ng ch·ªâ Cambridge KET (A2)",
      "Giao ti·∫øp c∆° b·∫£n trong c√°c t√¨nh hu·ªëng h√†ng ng√†y",
      "N·ªÅn t·∫£ng v·ªØng ch·∫Øc cho PET",
      "T·ª± tin v·ªõi 4 k·ªπ nƒÉng c∆° b·∫£n",
      "T∆∞ duy khoa h·ªçc qua c√°c d·ª± √°n STEAM",
    ],
    steamProjects: [
      "Smart Home Model - Thi·∫øt k·∫ø nh√† th√¥ng minh v·ªõi c·∫£m bi·∫øn",
      "Weather Station - Tr·∫°m quan s√°t th·ªùi ti·∫øt t·ª± ƒë·ªông",
      "Recycling Robot - Robot ph√¢n lo·∫°i r√°c th·∫£i",
    ],
    skills: ["Basic Listening", "Reading Comprehension", "Simple Writing", "Everyday Speaking"],
    nextCourse: "PET",
    targetScore: "Pass (120-132 ƒëi·ªÉm)",
  },
  {
    id: 2,
    slug: "luyen-thi-pet",
    name: "PET",
    fullName: "Preliminary English Test",
    level: "B1 - Trung c·∫•p",
    step: 2,
    duration: "4 th√°ng",
    sessions: "64 bu·ªïi h·ªçc",
    classSize: "10-15 h·ªçc vi√™n",
    successRate: "95%",
    price: "3.200.000ƒë",
    color: "from-blue-500 to-cyan-600",
    bgColor: "bg-blue-50",
    borderColor: "border-blue-200",
    icon: "üöÄ",
    description: "N√¢ng cao k·ªπ nƒÉng v√† t·ª± tin giao ti·∫øp trong m√¥i tr∆∞·ªùng h·ªçc thu·∫≠t",
    detailedDescription:
      "Kh√≥a h·ªçc PET ph√°t tri·ªÉn kh·∫£ nƒÉng s·ª≠ d·ª•ng ti·∫øng Anh trong c√°c t√¨nh hu·ªëng ph·ª©c t·∫°p h∆°n. H·ªçc sinh tham gia c√°c d·ª± √°n STEAM n√¢ng cao, h·ªçc c√°ch thuy·∫øt tr√¨nh, tranh lu·∫≠n v√† vi·∫øt b√°o c√°o khoa h·ªçc b·∫±ng ti·∫øng Anh.",
    prerequisites: ["ƒê√£ c√≥ ch·ª©ng ch·ªâ KET ho·∫∑c tr√¨nh ƒë·ªô A2", "H·ªçc sinh l·ªõp 8-12", "Ho√†n th√†nh kh√≥a KET t·∫°i Chamchi"],
    outcomes: [
      "ƒê·∫°t ch·ª©ng ch·ªâ Cambridge PET (B1)",
      "Giao ti·∫øp t·ª± tin trong m√¥i tr∆∞·ªùng h·ªçc t·∫≠p",
      "Chu·∫©n b·ªã t·ªët cho IELTS",
      "K·ªπ nƒÉng vi·∫øt lu·∫≠n c∆° b·∫£n",
      "Thuy·∫øt tr√¨nh d·ª± √°n b·∫±ng ti·∫øng Anh",
    ],
    steamProjects: [
      "Solar Car Challenge - Thi·∫øt k·∫ø xe nƒÉng l∆∞·ª£ng m·∫∑t tr·ªùi",
      "Water Purification System - H·ªá th·ªëng l·ªçc n∆∞·ªõc th√¥ng minh",
      "3D Printing Workshop - X∆∞·ªüng in 3D v√† thi·∫øt k·∫ø s·∫£n ph·∫©m",
    ],
    skills: ["Advanced Grammar", "Essay Writing", "Presentation Skills", "Critical Thinking"],
    nextCourse: "IELTS",
    targetScore: "Pass/Merit/Distinction (140-170 ƒëi·ªÉm)",
  },
  {
    id: 3,
    slug: "luyen-thi-ielts",
    name: "IELTS",
    fullName: "International English Language Testing System",
    level: "B2-C1 - Cao c·∫•p",
    step: 3,
    duration: "6 th√°ng",
    sessions: "96 bu·ªïi h·ªçc",
    classSize: "8-12 h·ªçc vi√™n",
    successRate: "92%",
    price: "4.800.000ƒë",
    color: "from-purple-500 to-violet-600",
    bgColor: "bg-purple-50",
    borderColor: "border-purple-200",
    icon: "üèÜ",
    description: "Chinh ph·ª•c ch·ª©ng ch·ªâ qu·ªëc t·∫ø cho du h·ªçc v√† ƒë·ªãnh c∆∞",
    detailedDescription:
      "Kh√≥a h·ªçc IELTS ƒë·ªânh cao gi√∫p h·ªçc sinh ƒë·∫°t tr√¨nh ƒë·ªô ti·∫øng Anh h·ªçc thu·∫≠t qu·ªëc t·∫ø. Th√¥ng qua c√°c d·ª± √°n STEAM ph·ª©c t·∫°p, h·ªçc sinh ph√°t tri·ªÉn kh·∫£ nƒÉng nghi√™n c·ª©u, ph√¢n t√≠ch v√† tr√¨nh b√†y √Ω t∆∞·ªüng m·ªôt c√°ch chuy√™n nghi·ªáp.",
    prerequisites: [
      "ƒê√£ c√≥ ch·ª©ng ch·ªâ PET ho·∫∑c tr√¨nh ƒë·ªô B1",
      "H·ªçc sinh l·ªõp 10-12, sinh vi√™n",
      "Ho√†n th√†nh kh√≥a PET t·∫°i Chamchi",
    ],
    outcomes: [
      "ƒê·∫°t ƒëi·ªÉm IELTS 6.0-8.0",
      "S·∫µn s√†ng cho du h·ªçc qu·ªëc t·∫ø",
      "K·ªπ nƒÉng h·ªçc thu·∫≠t chuy√™n s√¢u",
      "T∆∞ duy ph·∫£n bi·ªán b·∫±ng ti·∫øng Anh",
      "Nghi√™n c·ª©u v√† tr√¨nh b√†y khoa h·ªçc",
    ],
    steamProjects: [
      "AI Chatbot Development - Ph√°t tri·ªÉn chatbot AI ƒëa ng√¥n ng·ªØ",
      "Sustainable City Design - Thi·∫øt k·∫ø th√†nh ph·ªë b·ªÅn v·ªØng",
      "Biomedical Innovation - ƒê·ªïi m·ªõi trong y sinh h·ªçc",
    ],
    skills: ["Academic Writing", "Research Skills", "Advanced Speaking", "Data Analysis"],
    nextCourse: "International Success",
    targetScore: "6.0-8.0 (t√πy m·ª•c ti√™u du h·ªçc)",
  },
]

const steamMethodology = {
  title: "Ph∆∞∆°ng ph√°p STEAM",
  subtitle: "H·ªçc ti·∫øng Anh qua d·ª± √°n th·ª±c t·∫ø",
  description:
    "STEAM kh√¥ng ph·∫£i l√† m·ªôt c·∫•p ƒë·ªô ri√™ng bi·ªát, m√† l√† ph∆∞∆°ng ph√°p gi·∫£ng d·∫°y ƒë·ªôc ƒë√°o ƒë∆∞·ª£c √°p d·ª•ng xuy√™n su·ªët t·∫•t c·∫£ c√°c kh√≥a h·ªçc t·∫°i Chamchi.",
  components: [
    {
      letter: "S",
      title: "Science",
      titleVi: "Khoa h·ªçc",
      description: "H·ªçc t·ª´ v·ª±ng khoa h·ªçc qua th√≠ nghi·ªám th·ª±c t·∫ø",
      color: "from-blue-500 to-blue-600",
    },
    {
      letter: "T",
      title: "Technology",
      titleVi: "C√¥ng ngh·ªá",
      description: "S·ª≠ d·ª•ng c√¥ng ngh·ªá hi·ªán ƒë·∫°i trong h·ªçc t·∫≠p",
      color: "from-green-500 to-green-600",
    },
    {
      letter: "E",
      title: "Engineering",
      titleVi: "K·ªπ thu·∫≠t",
      description: "Gi·∫£i quy·∫øt v·∫•n ƒë·ªÅ b·∫±ng ti·∫øng Anh",
      color: "from-orange-500 to-orange-600",
    },
    {
      letter: "A",
      title: "Arts",
      titleVi: "Ngh·ªá thu·∫≠t",
      description: "S√°ng t·∫°o v√† th·ªÉ hi·ªán b·∫±ng ng√¥n ng·ªØ",
      color: "from-purple-500 to-purple-600",
    },
    {
      letter: "M",
      title: "Mathematics",
      titleVi: "To√°n h·ªçc",
      description: "T∆∞ duy logic v√† ph√¢n t√≠ch s·ªë li·ªáu",
      color: "from-red-500 to-red-600",
    },
  ],
}

export function LearningRoadmap() {
  const ref = useRef(null)
  const isInView = useInView(ref, { once: true, amount: 0.2 })
  const controls = useAnimation()
  const [selectedCourse, setSelectedCourse] = useState<number | null>(null)
  const [activeTab, setActiveTab] = useState<"overview" | "curriculum" | "projects">("overview")

  useEffect(() => {
    if (isInView) {
      controls.start("visible")
    }
  }, [isInView, controls])

  const container = {
    hidden: { opacity: 0 },
    visible: {
      opacity: 1,
      transition: {
        staggerChildren: 0.3,
      },
    },
  }

  const item = {
    hidden: { opacity: 0, y: 30 },
    visible: {
      opacity: 1,
      y: 0,
      transition: {
        duration: 0.8,
      },
    },
  }

  return (
    <section className="py-16 md:py-20 bg-gradient-to-br from-slate-50 via-blue-50 to-indigo-50" id="roadmap" ref={ref}>
      <div className="container-custom">
        {/* Header */}
        {/* <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={isInView ? { opacity: 1, y: 0 } : { opacity: 0, y: 20 }}
          transition={{ duration: 0.6 }}
          className="text-center max-w-4xl mx-auto mb-16"
        >
          <div className="inline-flex items-center gap-2 bg-primary/10 text-primary px-4 py-2 rounded-full text-sm font-medium mb-6">
            <MapPin className="h-4 w-4" />
            <span>L·ªô tr√¨nh h·ªçc t·∫≠p</span>
          </div>

          <h2 className="text-3xl md:text-4xl lg:text-5xl font-bold text-gray-900 mb-6">
            L·ªô tr√¨nh chinh ph·ª•c <span className="text-primary">ch·ª©ng ch·ªâ qu·ªëc t·∫ø</span>
          </h2>
          <p className="text-lg text-gray-700 leading-relaxed mb-8">
            H√†nh tr√¨nh t·ª´ KET ƒë·∫øn IELTS v·ªõi ph∆∞∆°ng ph√°p STEAM ƒë·ªôc ƒë√°o - M·ªói b∆∞·ªõc ti·∫øn ƒë·ªÅu v·ªØng ch·∫Øc v√† b·ªÅn v·ªØng
          </p>

          <div className="grid grid-cols-2 md:grid-cols-4 gap-4 max-w-2xl mx-auto">
            <div className="bg-white/80 backdrop-blur-sm rounded-lg p-4 shadow-md">
              <div className="text-2xl font-bold text-green-600">98%</div>
              <div className="text-sm text-gray-600">T·ª∑ l·ªá ƒë·ªó KET</div>
            </div>
            <div className="bg-white/80 backdrop-blur-sm rounded-lg p-4 shadow-md">
              <div className="text-2xl font-bold text-blue-600">95%</div>
              <div className="text-sm text-gray-600">T·ª∑ l·ªá ƒë·ªó PET</div>
            </div>
            <div className="bg-white/80 backdrop-blur-sm rounded-lg p-4 shadow-md">
              <div className="text-2xl font-bold text-purple-600">92%</div>
              <div className="text-sm text-gray-600">T·ª∑ l·ªá ƒë·ªó IELTS</div>
            </div>
            <div className="bg-white/80 backdrop-blur-sm rounded-lg p-4 shadow-md">
              <div className="text-2xl font-bold text-primary">1000+</div>
              <div className="text-sm text-gray-600">H·ªçc vi√™n th√†nh c√¥ng</div>
            </div>
          </div>
        </motion.div> */}

        {/* Linear Progression Roadmap */}
        <motion.div variants={container} initial="hidden" animate={controls} className="mb-16">
          {/* Desktop View */}
          <div className="hidden lg:block">
            <div className="relative">
              {/* Progress Line */}
              <div className="absolute top-1/2 left-0 right-0 h-1 bg-gradient-to-r from-green-500 via-blue-500 to-purple-500 rounded-full transform -translate-y-1/2 z-0"></div>

              {/* Course Cards */}
              <div className="relative z-10 grid grid-cols-3 gap-8">
                {progressionCourses.map((course, index) => (
                  <motion.div key={course.id} variants={item} className="relative">
                    {/* Connection Point */}
                    <div
                      className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-6 h-6 bg-white border-4 border-current rounded-full z-20"
                      style={{ color: course.color.split(" ")[1] }}
                    ></div>

                    {/* Course Card */}
                    <motion.div
                      className={`${course.bgColor} ${course.borderColor} border-2 rounded-2xl p-6 shadow-lg hover:shadow-xl transition-all duration-300 cursor-pointer mt-16`}
                      onClick={() => setSelectedCourse(course.id)}
                      whileHover={{ scale: 1.02, y: -5 }}
                      whileTap={{ scale: 0.98 }}
                    >
                      {/* Step Number */}
                      <div className="absolute -top-4 left-1/2 transform -translate-x-1/2">
                        <div
                          className={`w-8 h-8 bg-gradient-to-r ${course.color} rounded-full flex items-center justify-center text-white font-bold text-sm`}
                        >
                          {course.step}
                        </div>
                      </div>

                      {/* Course Content */}
                      <div className="text-center pt-4">
                        <div className="text-4xl mb-3">{course.icon}</div>
                        <div
                          className={`inline-block bg-gradient-to-r ${course.color} text-white px-4 py-2 rounded-full text-lg font-bold mb-3`}
                        >
                          {course.name}
                        </div>
                        <h3 className="text-xl font-bold text-gray-900 mb-2">{course.level}</h3>
                        <p className="text-gray-600 text-sm mb-4 line-clamp-2">{course.description}</p>

                        {/* Key Metrics */}
                        <div className="space-y-2 text-sm">
                          <div className="flex justify-between items-center">
                            <span className="text-gray-600">Th·ªùi gian:</span>
                            <span className="font-medium">{course.duration}</span>
                          </div>
                          <div className="flex justify-between items-center">
                            <span className="text-gray-600">T·ª∑ l·ªá ƒë·ªó:</span>
                            <span className="font-medium text-green-600">{course.successRate}</span>
                          </div>
                          <div className="flex justify-between items-center">
                            <span className="text-gray-600">M·ª•c ti√™u:</span>
                            <span className="font-medium text-primary">{course.targetScore}</span>
                          </div>
                        </div>

                        <button className="mt-4 w-full bg-white/80 hover:bg-white text-gray-800 font-medium py-2 px-4 rounded-lg transition-colors">
                          Xem chi ti·∫øt
                        </button>
                      </div>
                    </motion.div>

                    {/* Arrow to Next Course */}
                    {index < progressionCourses.length - 1 && (
                      <motion.div
                        className="absolute top-1/2 -right-4 transform -translate-y-1/2 z-30"
                        initial={{ opacity: 0, x: -10 }}
                        animate={{ opacity: 1, x: 0 }}
                        transition={{ delay: 1 + index * 0.3 }}
                      >
                        <div className="bg-white rounded-full p-2 shadow-md">
                          <ArrowRight className="h-5 w-5 text-primary" />
                        </div>
                      </motion.div>
                    )}
                  </motion.div>
                ))}
              </div>
            </div>
          </div>

          {/* Mobile View */}
          <div className="lg:hidden space-y-8">
            {progressionCourses.map((course, index) => (
              <motion.div key={course.id} variants={item} className="relative">
                {/* Course Card */}
                <motion.div
                  className={`${course.bgColor} ${course.borderColor} border-2 rounded-2xl p-6 shadow-lg hover:shadow-xl transition-all duration-300 cursor-pointer`}
                  onClick={() => setSelectedCourse(course.id)}
                  whileHover={{ scale: 1.02 }}
                  whileTap={{ scale: 0.98 }}
                >
                  {/* Step Badge */}
                  <div className="absolute -top-3 -left-3">
                    <div
                      className={`w-10 h-10 bg-gradient-to-r ${course.color} rounded-full flex items-center justify-center text-white font-bold shadow-lg`}
                    >
                      {course.step}
                    </div>
                  </div>

                  <div className="flex flex-col sm:flex-row gap-4 items-start">
                    {/* Course Icon & Name */}
                    <div className="text-center sm:text-left">
                      <div className="text-3xl mb-2">{course.icon}</div>
                      <div
                        className={`inline-block bg-gradient-to-r ${course.color} text-white px-3 py-1 rounded-full text-sm font-bold mb-2`}
                      >
                        {course.name}
                      </div>
                      <h3 className="text-lg font-bold text-gray-900">{course.level}</h3>
                    </div>

                    {/* Course Details */}
                    <div className="flex-1">
                      <p className="text-gray-600 text-sm mb-4">{course.description}</p>

                      <div className="grid grid-cols-2 gap-3 text-xs">
                        <div className="bg-white/60 rounded-lg p-2">
                          <div className="text-gray-600">Th·ªùi gian</div>
                          <div className="font-medium">{course.duration}</div>
                        </div>
                        <div className="bg-white/60 rounded-lg p-2">
                          <div className="text-gray-600">T·ª∑ l·ªá ƒë·ªó</div>
                          <div className="font-medium text-green-600">{course.successRate}</div>
                        </div>
                      </div>

                      <button className="mt-3 w-full bg-white/80 hover:bg-white text-gray-800 font-medium py-2 px-4 rounded-lg transition-colors text-sm">
                        Xem chi ti·∫øt
                      </button>
                    </div>
                  </div>
                </motion.div>

                {/* Arrow to Next Course */}
                {index < progressionCourses.length - 1 && (
                  <motion.div
                    className="flex justify-center my-4"
                    initial={{ opacity: 0, y: -10 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ delay: 0.5 + index * 0.3 }}
                  >
                    <div className="bg-white rounded-full p-3 shadow-md">
                      <ArrowDown className="h-5 w-5 text-primary" />
                    </div>
                  </motion.div>
                )}
              </motion.div>
            ))}
          </div>
        </motion.div>

        {/* STEAM Methodology Section */}
        {/* <motion.div
          initial={{ opacity: 0, y: 30 }}
          animate={isInView ? { opacity: 1, y: 0 } : { opacity: 0, y: 30 }}
          transition={{ duration: 0.8, delay: 0.6 }}
          className="bg-gradient-to-r from-primary/10 to-accent/10 rounded-2xl p-8 mb-16"
        >
          <div className="text-center mb-8">
            <div className="inline-flex items-center gap-2 bg-primary/20 text-primary px-4 py-2 rounded-full text-sm font-medium mb-4">
              <Sparkles className="h-4 w-4" />
              <span>Ph∆∞∆°ng ph√°p ƒë·ªôc quy·ªÅn</span>
            </div>
            <h3 className="text-2xl md:text-3xl font-bold text-gray-900 mb-4">{steamMethodology.title}</h3>
            <p className="text-lg text-gray-700 mb-2">{steamMethodology.subtitle}</p>
            <p className="text-gray-600 max-w-3xl mx-auto">{steamMethodology.description}</p>
          </div>

          <div className="grid grid-cols-2 md:grid-cols-5 gap-4 md:gap-6">
            {steamMethodology.components.map((component, index) => (
              <motion.div
                key={component.letter}
                className="text-center group"
                initial={{ opacity: 0, scale: 0.8 }}
                animate={{ opacity: 1, scale: 1 }}
                transition={{ delay: 0.8 + index * 0.1 }}
                whileHover={{ scale: 1.05 }}
              >
                <div
                  className={`w-16 h-16 md:w-20 md:h-20 bg-gradient-to-r ${component.color} rounded-2xl flex items-center justify-center mb-3 mx-auto group-hover:scale-110 transition-transform shadow-lg`}
                >
                  <span className="text-white font-bold text-xl md:text-2xl">{component.letter}</span>
                </div>
                <h4 className="font-bold text-gray-900 mb-1">{component.titleVi}</h4>
                <p className="text-xs md:text-sm text-gray-600 leading-relaxed">{component.description}</p>
              </motion.div>
            ))}
          </div>

          <div className="text-center mt-8">
            <p className="text-gray-700 text-sm md:text-base">
              <strong className="text-primary">T·∫•t c·∫£ kh√≥a h·ªçc</strong> t·∫°i Chamchi ƒë·ªÅu s·ª≠ d·ª•ng ph∆∞∆°ng ph√°p STEAM ƒë·ªÉ ƒë·∫£m
              b·∫£o h·ªçc sinh
              <strong className="text-accent"> h·ªçc ti·∫øng Anh m·ªôt c√°ch t·ª± nhi√™n v√† hi·ªáu qu·∫£</strong>
            </p>
          </div>
        </motion.div> */}

        {/* Course Comparison Table */}
        {/* <motion.div
          initial={{ opacity: 0, y: 30 }}
          animate={isInView ? { opacity: 1, y: 0 } : { opacity: 0, y: 30 }}
          transition={{ duration: 0.8, delay: 0.8 }}
          className="bg-white rounded-2xl shadow-xl overflow-hidden mb-12"
        >
          <div className="bg-gradient-to-r from-primary to-accent p-6">
            <h3 className="text-2xl font-bold text-white text-center">So s√°nh chi ti·∫øt c√°c kh√≥a h·ªçc</h3>
          </div>

          <div className="overflow-x-auto">
            <table className="w-full">
              <thead className="bg-gray-50">
                <tr>
                  <th className="px-4 py-4 text-left text-sm font-medium text-gray-900 min-w-[120px]">Ti√™u ch√≠</th>
                  {progressionCourses.map((course) => (
                    <th
                      key={course.id}
                      className="px-4 py-4 text-center text-sm font-medium text-gray-900 min-w-[150px]"
                    >
                      <div className="flex flex-col items-center">
                        <span className="text-2xl mb-1">{course.icon}</span>
                        <span className="font-bold">{course.name}</span>
                        <span className="text-xs text-gray-600">{course.level}</span>
                      </div>
                    </th>
                  ))}
                </tr>
              </thead>
              <tbody className="divide-y divide-gray-200">
                <tr>
                  <td className="px-4 py-4 text-sm font-medium text-gray-900">M·ª•c ti√™u ƒëi·ªÉm s·ªë</td>
                  {progressionCourses.map((course) => (
                    <td key={course.id} className="px-4 py-4 text-sm text-center">
                      <span className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-primary/10 text-primary">
                        {course.targetScore}
                      </span>
                    </td>
                  ))}
                </tr>
                <tr className="bg-gray-50">
                  <td className="px-4 py-4 text-sm font-medium text-gray-900">Th·ªùi gian h·ªçc</td>
                  {progressionCourses.map((course) => (
                    <td key={course.id} className="px-4 py-4 text-sm text-center font-medium">
                      {course.duration}
                    </td>
                  ))}
                </tr>
                <tr>
                  <td className="px-4 py-4 text-sm font-medium text-gray-900">S·ªë bu·ªïi h·ªçc</td>
                  {progressionCourses.map((course) => (
                    <td key={course.id} className="px-4 py-4 text-sm text-center">
                      {course.sessions}
                    </td>
                  ))}
                </tr>
                <tr className="bg-gray-50">
                  <td className="px-4 py-4 text-sm font-medium text-gray-900">Sƒ© s·ªë l·ªõp</td>
                  {progressionCourses.map((course) => (
                    <td key={course.id} className="px-4 py-4 text-sm text-center">
                      {course.classSize}
                    </td>
                  ))}
                </tr>
                <tr>
                  <td className="px-4 py-4 text-sm font-medium text-gray-900">T·ª∑ l·ªá th√†nh c√¥ng</td>
                  {progressionCourses.map((course) => (
                    <td key={course.id} className="px-4 py-4 text-sm text-center">
                      <span className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-green-100 text-green-800">
                        {course.successRate}
                      </span>
                    </td>
                  ))}
                </tr>
                <tr className="bg-gray-50">
                  <td className="px-4 py-4 text-sm font-medium text-gray-900">H·ªçc ph√≠</td>
                  {progressionCourses.map((course) => (
                    <td key={course.id} className="px-4 py-4 text-sm text-center font-semibold text-primary">
                      {course.price}
                    </td>
                  ))}
                </tr>
              </tbody>
            </table>
          </div>
        </motion.div> */}

        {/* CTA Section */}
        {/* <motion.div
          initial={{ opacity: 0, y: 30 }}
          animate={isInView ? { opacity: 1, y: 0 } : { opacity: 0, y: 30 }}
          transition={{ duration: 0.8, delay: 1.0 }}
          className="text-center"
        >
          <div className="bg-white rounded-2xl shadow-xl p-8 max-w-3xl mx-auto">
            <h3 className="text-2xl font-bold text-gray-900 mb-4">S·∫µn s√†ng b·∫Øt ƒë·∫ßu h√†nh tr√¨nh?</h3>
            <p className="text-gray-700 mb-6">
              ƒêƒÉng k√Ω t∆∞ v·∫•n mi·ªÖn ph√≠ ƒë·ªÉ ƒë∆∞·ª£c ƒë·ªãnh h∆∞·ªõng l·ªô tr√¨nh h·ªçc t·∫≠p ph√π h·ª£p nh·∫•t v·ªõi tr√¨nh ƒë·ªô hi·ªán t·∫°i
            </p>
            <div className="flex flex-col sm:flex-row gap-4 justify-center">
              <motion.button
                className="btn-primary flex items-center justify-center gap-2"
                whileHover={{ scale: 1.05 }}
                whileTap={{ scale: 0.95 }}
              >
                <Calendar className="h-5 w-5" />
                ƒê·∫∑t l·ªãch t∆∞ v·∫•n mi·ªÖn ph√≠
              </motion.button>
              <motion.button
                className="btn-accent flex items-center justify-center gap-2"
                whileHover={{ scale: 1.05 }}
                whileTap={{ scale: 0.95 }}
              >
                <Play className="h-5 w-5" />
                H·ªçc th·ª≠ tr·ª±c tuy·∫øn
              </motion.button>
            </div>
          </div>
        </motion.div> */}
      </div>

      {/* Course Detail Modal */}
      <AnimatePresence>
        {selectedCourse && (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            className="fixed inset-0 bg-black/80 z-50 flex items-center justify-center p-4"
            onClick={() => setSelectedCourse(null)}
          >
            <motion.div
              initial={{ scale: 0.8, opacity: 0 }}
              animate={{ scale: 1, opacity: 1 }}
              exit={{ scale: 0.8, opacity: 0 }}
              className="bg-white rounded-2xl max-w-4xl w-full max-h-[90vh] overflow-y-auto"
              onClick={(e) => e.stopPropagation()}
            >
              {(() => {
                const course = progressionCourses.find((c) => c.id === selectedCourse)
                if (!course) return null

                return (
                  <div>
                    {/* Header */}
                    <div className={`bg-gradient-to-r ${course.color} p-6 text-white`}>
                      <div className="flex items-center justify-between">
                        <div className="flex items-center gap-4">
                          <div className="text-4xl">{course.icon}</div>
                          <div>
                            <h3 className="text-2xl font-bold">{course.fullName}</h3>
                            <p className="text-white/90">{course.level}</p>
                            <p className="text-white/80 text-sm">B∆∞·ªõc {course.step} trong l·ªô tr√¨nh h·ªçc t·∫≠p</p>
                          </div>
                        </div>
                        <button
                          onClick={() => setSelectedCourse(null)}
                          className="text-white/80 hover:text-white text-2xl"
                        >
                          ‚úï
                        </button>
                      </div>
                    </div>

                    {/* Tabs */}
                    <div className="border-b border-gray-200">
                      <div className="flex">
                        {[
                          { id: "overview", label: "T·ªïng quan", icon: BookOpen },
                          { id: "curriculum", label: "Ch∆∞∆°ng tr√¨nh", icon: TrendingUp },
                          { id: "projects", label: "D·ª± √°n STEAM", icon: Zap },
                        ].map((tab) => (
                          <button
                            key={tab.id}
                            onClick={() => setActiveTab(tab.id as any)}
                            className={`flex items-center gap-2 px-6 py-4 font-medium transition-colors ${
                              activeTab === tab.id
                                ? "text-primary border-b-2 border-primary"
                                : "text-gray-600 hover:text-gray-900"
                            }`}
                          >
                            <tab.icon className="h-4 w-4" />
                            {tab.label}
                          </button>
                        ))}
                      </div>
                    </div>

                    {/* Content */}
                    <div className="p-6">
                      {activeTab === "overview" && (
                        <div className="space-y-6">
                          <div>
                            <h4 className="text-lg font-bold text-gray-900 mb-3">M√¥ t·∫£ kh√≥a h·ªçc</h4>
                            <p className="text-gray-700 leading-relaxed">{course.detailedDescription}</p>
                          </div>

                          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                            <div>
                              <h4 className="text-lg font-bold text-gray-900 mb-3">ƒêi·ªÅu ki·ªán ƒë·∫ßu v√†o</h4>
                              <ul className="space-y-2">
                                {course.prerequisites.map((req, index) => (
                                  <li key={index} className="flex items-start gap-2">
                                    <CheckCircle className="h-4 w-4 text-green-500 mt-0.5 shrink-0" />
                                    <span className="text-gray-700 text-sm">{req}</span>
                                  </li>
                                ))}
                              </ul>
                            </div>

                            <div>
                              <h4 className="text-lg font-bold text-gray-900 mb-3">K·∫øt qu·∫£ ƒë·∫°t ƒë∆∞·ª£c</h4>
                              <ul className="space-y-2">
                                {course.outcomes.map((outcome, index) => (
                                  <li key={index} className="flex items-start gap-2">
                                    <Star className="h-4 w-4 text-yellow-500 mt-0.5 shrink-0" />
                                    <span className="text-gray-700 text-sm">{outcome}</span>
                                  </li>
                                ))}
                              </ul>
                            </div>
                          </div>

                          <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                            <div className="bg-gray-50 rounded-lg p-4 text-center">
                              <Clock className="h-6 w-6 text-primary mx-auto mb-2" />
                              <div className="font-bold text-gray-900">{course.duration}</div>
                              <div className="text-sm text-gray-600">Th·ªùi gian</div>
                            </div>
                            <div className="bg-gray-50 rounded-lg p-4 text-center">
                              <Users className="h-6 w-6 text-primary mx-auto mb-2" />
                              <div className="font-bold text-gray-900">{course.classSize}</div>
                              <div className="text-sm text-gray-600">Sƒ© s·ªë l·ªõp</div>
                            </div>
                            <div className="bg-gray-50 rounded-lg p-4 text-center">
                              <Target className="h-6 w-6 text-primary mx-auto mb-2" />
                              <div className="font-bold text-gray-900">{course.successRate}</div>
                              <div className="text-sm text-gray-600">T·ª∑ l·ªá ƒë·ªó</div>
                            </div>
                            <div className="bg-gray-50 rounded-lg p-4 text-center">
                              <Award className="h-6 w-6 text-primary mx-auto mb-2" />
                              <div className="font-bold text-gray-900">{course.price}</div>
                              <div className="text-sm text-gray-600">H·ªçc ph√≠</div>
                            </div>
                          </div>
                        </div>
                      )}

                      {activeTab === "curriculum" && (
                        <div className="space-y-4">
                          <h4 className="text-lg font-bold text-gray-900">K·ªπ nƒÉng tr·ªçng t√¢m</h4>
                          <div className="grid grid-cols-2 md:grid-cols-4 gap-3">
                            {course.skills.map((skill, index) => (
                              <div
                                key={index}
                                className="bg-primary/10 text-primary px-3 py-2 rounded-lg text-center font-medium text-sm"
                              >
                                {skill}
                              </div>
                            ))}
                          </div>
                          <div className="mt-6 bg-blue-50 rounded-lg p-4">
                            <h5 className="font-bold text-gray-900 mb-2">Ph∆∞∆°ng ph√°p STEAM ƒë∆∞·ª£c √°p d·ª•ng:</h5>
                            <p className="text-gray-600 text-sm">
                              T·∫•t c·∫£ n·ªôi dung h·ªçc t·∫≠p ƒë·ªÅu ƒë∆∞·ª£c t√≠ch h·ª£p v·ªõi c√°c d·ª± √°n STEAM th·ª±c t·∫ø, gi√∫p h·ªçc sinh h·ªçc
                              ti·∫øng Anh m·ªôt c√°ch t·ª± nhi√™n v√† hi·ªáu qu·∫£ th√¥ng qua vi·ªác gi·∫£i quy·∫øt c√°c v·∫•n ƒë·ªÅ khoa h·ªçc v√†
                              c√¥ng ngh·ªá.
                            </p>
                          </div>
                        </div>
                      )}

                      {activeTab === "projects" && (
                        <div className="space-y-4">
                          <h4 className="text-lg font-bold text-gray-900">D·ª± √°n STEAM ti√™u bi·ªÉu</h4>
                          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                            {course.steamProjects.map((project, index) => (
                              <div
                                key={index}
                                className="bg-gray-50 rounded-lg p-4 hover:bg-gray-100 transition-colors"
                              >
                                <div className="text-2xl mb-2">‚öóÔ∏è</div>
                                <h5 className="font-bold text-gray-900 mb-2">{project.split(" - ")[0]}</h5>
                                <p className="text-sm text-gray-600">{project.split(" - ")[1]}</p>
                              </div>
                            ))}
                          </div>
                          <div className="mt-6 bg-accent/10 rounded-lg p-4">
                            <h5 className="font-bold text-gray-900 mb-2">L·ª£i √≠ch c·ªßa d·ª± √°n STEAM:</h5>
                            <ul className="text-sm text-gray-600 space-y-1">
                              <li>‚Ä¢ H·ªçc ti·∫øng Anh qua ng·ªØ c·∫£nh th·ª±c t·∫ø</li>
                              <li>‚Ä¢ Ph√°t tri·ªÉn t∆∞ duy ph·∫£n bi·ªán v√† s√°ng t·∫°o</li>
                              <li>‚Ä¢ K·ªπ nƒÉng thuy·∫øt tr√¨nh v√† l√†m vi·ªác nh√≥m</li>
                              <li>‚Ä¢ Chu·∫©n b·ªã cho m√¥i tr∆∞·ªùng h·ªçc t·∫≠p qu·ªëc t·∫ø</li>
                            </ul>
                          </div>
                        </div>
                      )}
                    </div>

                    {/* Footer */}
                    <div className="border-t border-gray-200 p-6">
                      <div className="flex flex-col sm:flex-row gap-4 justify-center">
                        <Link
                          href={`/courses/${course.slug}`}
                          className="btn-primary flex items-center justify-center gap-2"
                        >
                          <BookOpen className="h-4 w-4" />
                          Xem chi ti·∫øt kh√≥a h·ªçc
                        </Link>
                        <button className="btn-accent flex items-center justify-center gap-2">
                          <Calendar className="h-4 w-4" />
                          ƒêƒÉng k√Ω h·ªçc th·ª≠
                        </button>
                      </div>
                    </div>
                  </div>
                )
              })()}
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>
    </section>
  )
}
