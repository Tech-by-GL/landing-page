"use client"

import React from "react"

import { useEffect, useRef, useState } from "react"
import Image from "next/image"
import { motion, useAnimation, useInView } from "framer-motion"
import { Play, Pause, Volume2, BookOpen, Mic, Headphones } from "lucide-react"

const solutions = [
  {
    id: 1,
    icon: Mic,
    title: "Kh·∫Øc ph·ª•c ph√°t √¢m sai",
    problem: "Nhi·ªÅu h·ªçc sinh g·∫∑p kh√≥ khƒÉn trong vi·ªác ph√°t √¢m ch√≠nh x√°c c√°c √¢m ti·∫øng Anh",
    solution: "Chamchi s·ª≠ d·ª•ng c√¥ng ngh·ªá AI ƒë·ªÉ ph√¢n t√≠ch ph√°t √¢m v√† ƒë∆∞a ra ph·∫£n h·ªìi t·ª©c th√¨",
    methodology: [
      "S·ª≠ d·ª•ng ph·∫ßn m·ªÅm ph√¢n t√≠ch gi·ªçng n√≥i chuy√™n nghi·ªáp",
      "Luy·ªán t·∫≠p ph√°t √¢m theo t·ª´ng √¢m v·ªã c·ª• th·ªÉ",
      "Th·ª±c h√†nh v·ªõi gi√°o vi√™n b·∫£n ng·ªØ 1-1",
      "Ghi √¢m v√† so s√°nh v·ªõi chu·∫©n ph√°t √¢m qu·ªëc t·∫ø",
    ],
    image: "/placeholder.svg?height=400&width=600",
    video: "/videos/pronunciation-training.mp4",
    results: "95% h·ªçc vi√™n c·∫£i thi·ªán ph√°t √¢m sau 3 th√°ng",
  },
  {
    id: 2,
    icon: BookOpen,
    title: "C·∫£i thi·ªán k·ªπ nƒÉng ƒë·ªçc hi·ªÉu",
    problem: "H·ªçc sinh th∆∞·ªùng g·∫∑p kh√≥ khƒÉn trong vi·ªác hi·ªÉu n·ªôi dung v√† ph√¢n t√≠ch vƒÉn b·∫£n ti·∫øng Anh",
    solution: "Ph∆∞∆°ng ph√°p ƒë·ªçc hi·ªÉu t√≠ch c·ª±c k·∫øt h·ª£p v·ªõi c√°c d·ª± √°n STEAM th·ª±c t·∫ø",
    methodology: [
      "K·ªπ thu·∫≠t ƒë·ªçc l∆∞·ªõt (Skimming) v√† ƒë·ªçc t√¨m th√¥ng tin (Scanning)",
      "Ph√¢n t√≠ch c·∫•u tr√∫c vƒÉn b·∫£n v√† t·ª´ v·ª±ng trong ng·ªØ c·∫£nh",
      "Th·ª±c h√†nh v·ªõi c√°c ch·ªß ƒë·ªÅ khoa h·ªçc v√† c√¥ng ngh·ªá",
      "S·ª≠ d·ª•ng s∆° ƒë·ªì t∆∞ duy ƒë·ªÉ t·ªï ch·ª©c th√¥ng tin",
    ],
    image: "/placeholder.svg?height=400&width=600",
    video: "/videos/reading-comprehension.mp4",
    results: "90% h·ªçc vi√™n tƒÉng t·ªëc ƒë·ªô ƒë·ªçc v√† hi·ªÉu b√†i",
  },
  {
    id: 3,
    icon: Headphones,
    title: "N√¢ng cao kh·∫£ nƒÉng nghe hi·ªÉu",
    problem: "H·ªçc sinh kh√≥ theo k·ªãp t·ªëc ƒë·ªô n√≥i t·ª± nhi√™n v√† hi·ªÉu c√°c gi·ªçng ƒëi·ªáu kh√°c nhau",
    solution: "H·ªá th·ªëng luy·ªán nghe ƒëa c·∫•p ƒë·ªô v·ªõi n·ªôi dung STEAM h·∫•p d·∫´n",
    methodology: [
      "Luy·ªán nghe t·ª´ ch·∫≠m ƒë·∫øn nhanh m·ªôt c√°ch c√≥ h·ªá th·ªëng",
      "Ti·∫øp x√∫c v·ªõi nhi·ªÅu gi·ªçng ƒëi·ªáu: Anh, M·ªπ, √öc",
      "S·ª≠ d·ª•ng video khoa h·ªçc v√† c√¥ng ngh·ªá l√†m t√†i li·ªáu",
      "K·ªπ thu·∫≠t ghi ch√∫ v√† d·ª± ƒëo√°n n·ªôi dung",
    ],
    image: "/placeholder.svg?height=400&width=600",
    video: "/videos/listening-skills.mp4",
    results: "88% h·ªçc vi√™n c·∫£i thi·ªán kh·∫£ nƒÉng nghe hi·ªÉu",
  },
]

export function SolutionsSection() {
  const ref = useRef(null)
  const isInView = useInView(ref, { once: true, amount: 0.2 })
  const controls = useAnimation()
  const [activeTab, setActiveTab] = useState(0)
  const [playingVideo, setPlayingVideo] = useState<number | null>(null)

  useEffect(() => {
    if (isInView) {
      controls.start("visible")
    }
  }, [isInView, controls])

  const container = {
    hidden: { opacity: 0 },
    visible: {
      opacity: 1,
      transition: {
        staggerChildren: 0.2,
      },
    },
  }

  const item = {
    hidden: { opacity: 0, y: 30 },
    visible: {
      opacity: 1,
      y: 0,
      transition: {
        duration: 0.6,
      },
    },
  }

  const toggleVideo = (index: number) => {
    setPlayingVideo(playingVideo === index ? null : index)
  }

  return (
    <section className="section-padding bg-gradient-to-br from-blue-50 to-indigo-50" id="solutions" ref={ref}>
      <div className="container-custom pt-16">
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={isInView ? { opacity: 1, y: 0 } : { opacity: 0, y: 20 }}
          transition={{ duration: 0.6 }}
          className="text-center max-w-4xl mx-auto mb-16"
        >
          <h2 className="text-3xl md:text-4xl lg:text-5xl font-bold text-gray-900 mb-6">
            Gi·∫£i ph√°p <span className="text-primary">ƒë·ªôt ph√°</span> cho t·ª´ng th√°ch th·ª©c
          </h2>
          <p className="text-lg md:text-xl text-gray-700 leading-relaxed">
            Chamchi hi·ªÉu r√µ nh·ªØng kh√≥ khƒÉn m√† h·ªçc sinh g·∫∑p ph·∫£i khi h·ªçc ti·∫øng Anh. Ch√∫ng t√¥i ƒë√£ ph√°t tri·ªÉn c√°c gi·∫£i ph√°p
            c·ª• th·ªÉ, khoa h·ªçc v√† hi·ªáu qu·∫£ ƒë·ªÉ gi√∫p h·ªçc sinh v∆∞·ª£t qua m·ªçi r√†o c·∫£n.
          </p>
        </motion.div>

        {/* Solution Tabs */}
        <motion.div
          variants={container}
          initial="hidden"
          animate={controls}
          className="flex flex-wrap justify-center gap-4 mb-12"
        >
          {solutions.map((solution, index) => {
            const IconComponent = solution.icon
            return (
              <motion.button
                key={solution.id}
                variants={item}
                onClick={() => setActiveTab(index)}
                className={`flex items-center gap-3 px-6 py-4 rounded-xl font-medium transition-all duration-300 ${
                  activeTab === index
                    ? "bg-primary text-white shadow-lg scale-105"
                    : "bg-white text-gray-700 hover:bg-primary/10 hover:text-primary shadow-md"
                }`}
                whileHover={{ scale: 1.05 }}
                whileTap={{ scale: 0.95 }}
              >
                <IconComponent className="h-5 w-5" />
                <span className="hidden sm:inline">{solution.title}</span>
              </motion.button>
            )
          })}
        </motion.div>

        {/* Active Solution Content */}
        <motion.div
          key={activeTab}
          initial={{ opacity: 0, x: 20 }}
          animate={{ opacity: 1, x: 0 }}
          transition={{ duration: 0.5 }}
          className="bg-white rounded-2xl shadow-xl overflow-hidden"
        >
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-0">
            {/* Content Side */}
            <div className="p-8 lg:p-12">
              <div className="flex items-center gap-4 mb-6">
                {React.createElement(solutions[activeTab].icon, {
                  className: "h-8 w-8 text-primary",
                })}
                <h3 className="text-2xl lg:text-3xl font-bold text-gray-900">{solutions[activeTab].title}</h3>
              </div>

              <div className="space-y-6">
                <div className="bg-red-50 border-l-4 border-red-400 p-4 rounded-r-lg">
                  <h4 className="font-bold text-red-800 mb-2">üö´ Th√°ch th·ª©c:</h4>
                  <p className="text-red-700">{solutions[activeTab].problem}</p>
                </div>

                <div className="bg-green-50 border-l-4 border-green-400 p-4 rounded-r-lg">
                  <h4 className="font-bold text-green-800 mb-2">‚úÖ Gi·∫£i ph√°p Chamchi:</h4>
                  <p className="text-green-700">{solutions[activeTab].solution}</p>
                </div>

                <div className="bg-blue-50 border-l-4 border-blue-400 p-4 rounded-r-lg">
                  <h4 className="font-bold text-blue-800 mb-3">üéØ Ph∆∞∆°ng ph√°p c·ª• th·ªÉ:</h4>
                  <ul className="space-y-2">
                    {solutions[activeTab].methodology.map((method, index) => (
                      <li key={index} className="flex items-start gap-2 text-blue-700">
                        <span className="text-blue-500 mt-1">‚Ä¢</span>
                        <span>{method}</span>
                      </li>
                    ))}
                  </ul>
                </div>

                <div className="bg-yellow-50 border-l-4 border-yellow-400 p-4 rounded-r-lg">
                  <h4 className="font-bold text-yellow-800 mb-2">üìä K·∫øt qu·∫£:</h4>
                  <p className="text-yellow-700 font-semibold">{solutions[activeTab].results}</p>
                </div>
              </div>
            </div>

            {/* Media Side */}
            <div className="relative bg-gray-100">
              <div className="relative h-full min-h-[400px]">
                <Image
                  src={solutions[activeTab].image || "/placeholder.svg"}
                  alt={solutions[activeTab].title}
                  fill
                  className="object-cover"
                />

                {/* Video Overlay */}
                <div className="absolute inset-0 bg-black/20 flex items-center justify-center">
                  <motion.button
                    onClick={() => toggleVideo(activeTab)}
                    className="bg-white/90 hover:bg-white text-primary rounded-full p-4 shadow-lg transition-all duration-300"
                    whileHover={{ scale: 1.1 }}
                    whileTap={{ scale: 0.9 }}
                  >
                    {playingVideo === activeTab ? <Pause className="h-8 w-8" /> : <Play className="h-8 w-8 ml-1" />}
                  </motion.button>
                </div>

                {/* Video Player (simulated) */}
                {playingVideo === activeTab && (
                  <motion.div
                    initial={{ opacity: 0 }}
                    animate={{ opacity: 1 }}
                    className="absolute inset-0 bg-black flex items-center justify-center"
                  >
                    <div className="text-white text-center">
                      <Volume2 className="h-12 w-12 mx-auto mb-4 animate-pulse" />
                      <p className="text-lg">Video ƒëang ph√°t...</p>
                      <p className="text-sm opacity-75">{solutions[activeTab].title}</p>
                    </div>
                  </motion.div>
                )}
              </div>
            </div>
          </div>
        </motion.div>

        {/* Call to Action */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={isInView ? { opacity: 1, y: 0 } : { opacity: 0, y: 20 }}
          transition={{ duration: 0.6, delay: 0.4 }}
          className="text-center mt-16"
        >
          <div className="bg-primary/10 rounded-2xl p-8 max-w-3xl mx-auto">
            <h3 className="text-2xl font-bold text-gray-900 mb-4">S·∫µn s√†ng tr·∫£i nghi·ªám ph∆∞∆°ng ph√°p h·ªçc ƒë·ªôt ph√°?</h3>
            <p className="text-gray-700 mb-6">
              ƒêƒÉng k√Ω ngay ƒë·ªÉ ƒë∆∞·ª£c t∆∞ v·∫•n mi·ªÖn ph√≠ v√† tr·∫£i nghi·ªám bu·ªïi h·ªçc th·ª≠ kh√¥ng m·∫•t ph√≠
            </p>
            <div className="flex flex-col sm:flex-row gap-4 justify-center">
              <motion.button className="btn-primary" whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }}>
                ƒêƒÉng k√Ω h·ªçc th·ª≠ mi·ªÖn ph√≠
              </motion.button>
              <motion.button className="btn-accent" whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }}>
                T∆∞ v·∫•n tr·ª±c ti·∫øp
              </motion.button>
            </div>
          </div>
        </motion.div>
      </div>
    </section>
  )
}
